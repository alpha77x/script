local a={}a.__index=a;a.preset={["default"]={Color=Color3.new(1,1,1),Icon=""},["warn"]={Color=Color3.new(1,1,0),Icon="rbxasset://textures/DevConsole/Warning.png"},["error"]={Color=Color3.new(1,0,0),Icon="rbxasset://textures/DevConsole/Error.png"}}function a.getassetfromurl(b,c)assert(getcustomasset and writefile and delfile,"Not Support Executor (Required getcustomasset)")assert(b and c,"Invalid argument")local d=game:HttpGet(b)local c=c;writefile(c,d)local e=getcustomasset(c)delfile(c)return e end;function a.new()local self=setmetatable({},a)self.new=nil;self.check_content=math.random(1000000,9999999)self.message_object=nil;self.last_modify_message=""self.icon=""self.base_text=""self.color=nil;self.setMessage=function(self,f)self.last_modify_message=f;return self end;self.setIcon=function(self,g)self.icon=g;return self end;self.setColor=function(self,h)self.color=h;return self end;self.setPreset=function(self,c,i)assert(c and i and typeof(i)=="table"and i["Color"]and i["Icon"],"Error Arguments")self[c]=function(self,f)self:setMessage(f or"")self:setColor(i["Color"])self:setIcon(i["Icon"])end;return self end;self.detection=coroutine.create(function()local j;repeat j=game:GetService("CoreGui"):FindFirstChild("DevConsoleMaster")task.wait()until j;j.DevConsoleWindow.DevConsoleUI.DescendantAdded:Connect(function(k)if k:IsA("TextLabel")and k.Text:find(self.check_content)then self.message_object=k.Parent;if not self.color then self.color=k.TextColor3 end;self.base_text=k.Text:split(" -- ")[1].." -- "end end)for l,k in pairs(j.DevConsoleWindow.DevConsoleUI:GetDescendants())do if k:IsA("TextLabel")and k.Text:find(self.check_content)then self.message_object=k.Parent;if not self.color then self.color=k.TextColor3 end;self.base_text=k.Text:split(" -- ")[1].." -- "end end end)self.updater=coroutine.create(function()while task.wait()do if self.message_object then task.spawn(function()xpcall(function()self.message_object.image.Image=self.icon end,function()self.message_object=nil end)end)task.spawn(function()xpcall(function()self.message_object.msg.Text=self.base_text..self.last_modify_message end,function()self.message_object=nil end)end)task.spawn(function()xpcall(function()self.message_object.msg.TextColor3=self.color end,function()self.message_object=nil end)end)end end end)coroutine.resume(self.detection)coroutine.resume(self.updater)for c,m in pairs(a.preset)do self:setPreset(c,m)end;return self end;return a
