local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 79) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		for Idx = 1, gBits32() do
			Lines[Idx] = gBits32();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local VIP = 1;
			local Top = -1;
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local function Loop()
				local Instr = Instr;
				local Proto = Proto;
				local Params = Params;
				local _R = _R;
				local Vararg = {};
				local Lupvals = {};
				local Stk = {};
				for Idx = 0, PCount do
					if (Idx >= Params) then
						Vararg[Idx - Params] = Args[Idx + 1];
					else
						Stk[Idx] = Args[Idx + 1];
					end
				end
				local Varargsz = (PCount - Params) + 1;
				local Inst;
				local Enum;
				while true do
					Inst = Instr[VIP];
					Enum = Inst[1];
					if (Enum <= 10) then
						if (Enum <= 4) then
							if (Enum <= 1) then
								if (Enum > 0) then
									Stk[Inst[2]] = Inst[3];
								else
									Stk[Inst[2]][Inst[3]] = Inst[4];
								end
							elseif (Enum <= 2) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							elseif (Enum > 3) then
								Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 7) then
							if (Enum <= 5) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							elseif (Enum > 6) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]] = Env[Inst[3]];
							end
						elseif (Enum <= 8) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						elseif (Enum == 9) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						else
							Stk[Inst[2]] = Stk[Inst[3]];
						end
					elseif (Enum <= 15) then
						if (Enum <= 12) then
							if (Enum > 11) then
								do
									return;
								end
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 13) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 10) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						elseif (Enum > 14) then
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 18) then
						if (Enum <= 16) then
							Stk[Inst[2]]();
						elseif (Enum == 17) then
							Stk[Inst[2]] = {};
						else
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						end
					elseif (Enum <= 19) then
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					elseif (Enum > 20) then
						if (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					else
						local B = Inst[3];
						local K = Stk[B];
						for Idx = B + 1, Inst[4] do
							K = K .. Stk[Idx];
						end
						Stk[Inst[2]] = K;
					end
					VIP = VIP + 1;
				end
			end
			A, B = _R(PCall(Loop));
			if not A[1] then
				local line = Chunk[4][VIP] or "?";
				error("Script error at [" .. line .. "]:" .. A[2]);
			else
				return Unpack(A, 2, B);
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
VMCall("LOL!3E3O0003043O0067616D6503073O00506C6163654964022O00301450EFF941030A3O006C6F6164737472696E6703073O00482O7470476574033D3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F73686C6578776172652F4F72696F6E2F6D61696E2F736F75726365030A3O004D616B6557696E646F7703043O004E616D65030C3O00416C70686120487562207C20030A3O004765745365727669636503123O004D61726B6574706C61636553657276696365030E3O0047657450726F64756374496E666F034O00030B3O00486964655072656D69756D0100030A3O0053617665436F6E6669672O01030C3O00436F6E666967466F6C64657203083O00416C706861487562030B3O00496E74726F456E61626C6503093O00496E74726F5465787403093O00416C7068612048756203103O004D616B654E6F74696669636174696F6E03153O0053752O63652O7366752O6C7920657865637574656403073O00436F6E74656E7403073O0053752O63652O7303053O00496D61676503173O00726278612O73657469643A2O2F2O34382O3334352O393803043O0054696D65026O00144003023O005F4703073O0070696E4O6703073O004D616B6554616203043O004D61696E03043O0049636F6E03173O00726278612O73657469643A2O2F2O372O33393630393831030B3O005072656D69756D4F6E6C79030A3O00412O6453656374696F6E03093O00412O6442752O746F6E030A3O004C6F6E67205468726F7703083O0043612O6C6261636B030D3O00506F69736F6E2044616D61676503093O00416E7469204772616203083O00416E74692041464B03083O0053652O74696E677303173O00726278612O73657469643A2O2F2O373334303533343935030E3O00496E66696E697465205969656C6403083O00496E66204A756D7003063O0052656A6F696E03073O0044656661756C7403203O00446973636F726420536572766572205B20436C69636B20746F20436F7079205D03083O00496E74657261637403073O00446973636F726403063O0055706461746503173O00726278612O73657469643A2O2F2O372O333932302O3137030C3O00412O64506172616772617068030A3O00323032332D30322D3134031E3O00412O64202D20506F69736F6E2044616D6167652C20416E74692D47726162030A3O00323032332D30312D3238030A3O00412O64202D204D61696E03083O004F72696F6E4C696203073O0044657374726F79007D3O0012063O00013O00200F5O00020026153O00790001000300040B3O007900010012063O00043O001206000100013O002012000100010005001201000300064O0013000100034O00075O00022O00053O0001000200201200013O00072O001100033O0006001201000400093O001206000500013O00201200050005000A0012010007000B4O000300050007000200201200050005000C001206000700013O00200F0007000700022O000300050007000200200F0005000500080012010006000D4O001400040004000600100800030008000400302O0003000E000F00302O00030010001100302O00030012001300302O00030014001100302O0003001500162O000300010003000200201200023O00172O001100043O000400302O00040008001800302O00040019001A00302O0004001B001C00302O0004001D001E2O00020002000400010012060002001F3O00302O0002002000110020120002000100212O001100043O000300302O00040008002200302O00040023002400302O00040025000F2O00030002000400020020120003000200262O001100053O000100302O0005000800222O00030003000500020020120004000200272O001100063O000200302O00060008002800020400075O0010080006002900072O00020004000600010020120004000200272O001100063O000200302O00060008002A000204000700013O0010080006002900072O00020004000600010020120004000200272O001100063O000200302O00060008002B000204000700023O0010080006002900072O00020004000600010020120004000200272O001100063O000200302O00060008002C000204000700033O0010080006002900072O00020004000600010020120004000100212O001100063O000300302O00060008002D00302O00060023002E00302O00060025000F2O00030004000600020020120005000400272O001100073O000200302O00070008002F000204000800043O0010080007002900082O00020005000700010020120005000400272O001100073O000200302O000700080030000204000800053O0010080007002900082O00020005000700010020120005000400272O001100073O000300302O00070008003100302O00070032000F000204000800063O0010080007002900082O00020005000700010020120005000400272O001100073O000300302O00070008003300302O000700340035000204000800073O0010080007002900082O00030005000700020020120006000100212O001100083O000300302O00080008003600302O00080023003700302O00080025000F2O0003000600080002002012000700060038001201000900393O001201000A003A4O00020007000A00010020120007000600380012010009003B3O001201000A003C4O00020007000A00010012063O003D3O0020125O003E2O000E3O000200012O000C3O00013O00083O00043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O7470476574034B3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F6B696D62652O6E65722F7363726970742F6D61696E2F616C7068614875622F5038523953415543564400083O0012063O00013O001206000100023O002012000100010003001201000300044O0013000100034O00075O00022O00103O000100012O000C3O00017O00083O00093O00093O00093O00093O00093O00093O00093O000A3O00043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O7470476574034B3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F6B696D62652O6E65722F7363726970742F6D61696E2F616C7068614875622F5138523953425543564400083O0012063O00013O001206000100023O002012000100010003001201000300044O0013000100034O00075O00022O00103O000100012O000C3O00017O00083O000C3O000C3O000C3O000C3O000C3O000C3O000C3O000D3O00043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O7470476574034B3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F6B696D62652O6E65722F7363726970742F6D61696E2F616C7068614875622F324A334B344E3650375100083O0012063O00013O001206000100023O002012000100010003001201000300044O0013000100034O00075O00022O00103O000100012O000C3O00017O00083O000F3O000F3O000F3O000F3O000F3O000F3O000F3O00103O00073O0003043O0067616D65030A3O0047657453657276696365030B3O005669727475616C5573657203073O00506C6179657273030B3O004C6F63616C506C6179657203053O0049646C656403073O00636F2O6E656374000F3O0012063O00013O0020125O0002001201000200034O00033O00020002001206000100013O002012000100010002001201000300044O000300010003000200200F00010001000500200F00010001000600201200010001000700060D00033O000100012O000A8O00020001000300012O000C3O00013O00013O000A3O00030B3O0042752O746F6E32446F776E03073O00566563746F72322O033O006E6577028O0003093O00776F726B7370616365030D3O0043752O72656E7443616D65726103063O00434672616D6503043O0077616974026O003E4003093O0042752O746F6E325570001A4O00097O0020125O0001001206000200023O00200F000200020003001201000300043O001201000400044O0003000200040002001206000300053O00200F00030003000600200F0003000300072O00023O000300010012063O00083O001201000100094O000E3O000200012O00097O0020125O000A001206000200023O00200F000200020003001201000300043O001201000400044O0003000200040002001206000300053O00200F00030003000600200F0003000300072O00023O000300012O000C3O00017O001A3O00143O00143O00143O00143O00143O00143O00143O00143O00143O00143O00143O00153O00153O00153O00163O00163O00163O00163O00163O00163O00163O00163O00163O00163O00163O00173O000F3O00123O00123O00123O00123O00133O00133O00133O00133O00133O00133O00133O00173O00173O00133O00183O00043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O747047657403443O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F4564676549592F696E66696E6974657969656C642F6D61737465722F736F7572636500083O0012063O00013O001206000100023O002012000100010003001201000300044O0013000100034O00075O00022O00103O000100012O000C3O00017O00083O001B3O001B3O001B3O001B3O001B3O001B3O001B3O001C3O00043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O747047657403483O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F6B696D62652O6E65722F7363726970742F6D61696E2F616C7068614875622F696E666A756D7000083O0012063O00013O001206000100023O002012000100010003001201000300044O0013000100034O00075O00022O00103O000100012O000C3O00017O00083O001E3O001E3O001E3O001E3O001E3O001E3O001E3O001F3O00073O0003043O0067616D65030A3O0047657453657276696365030F3O0054656C65706F72745365727669636503083O0054656C65706F727403073O00506C616365496403073O00506C6179657273030B3O004C6F63616C506C61796572010E3O001206000100013O002012000100010002001201000300034O0003000100030002002012000100010004001206000300013O00200F000300030005001206000400013O002012000400040002001201000600064O000300040006000200200F0004000400072O00020001000400012O000C3O00017O000E3O00213O00213O00213O00213O00213O00213O00213O00213O00213O00213O00213O00213O00213O00223O00023O00030C3O00736574636C6970626F617264031D3O00682O7470733A2O2F646973636F72642E2O672F5A56437558575A4B744200043O0012063O00013O001201000100024O000E3O000200012O000C3O00017O00043O00243O00243O00243O00253O007D3O00013O00013O00013O00013O00023O00023O00023O00023O00023O00023O00023O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00033O00043O00043O00043O00043O00043O00043O00043O00053O00053O00063O00063O00063O00063O00063O00063O00073O00073O00073O00073O00083O00083O00083O000A3O000A3O00083O000B3O000B3O000B3O000D3O000D3O000B3O000E3O000E3O000E3O00103O00103O000E3O00113O00113O00113O00183O00183O00113O00193O00193O00193O00193O00193O00193O001A3O001A3O001A3O001C3O001C3O001A3O001D3O001D3O001D3O001F3O001F3O001D3O00203O00203O00203O00203O00223O00223O00203O00233O00233O00233O00233O00253O00253O00233O00263O00263O00263O00263O00263O00263O00273O00273O00273O00273O00283O00283O00283O00283O002A3O002A3O002A3O002A3O00", GetFEnv(), ...);
